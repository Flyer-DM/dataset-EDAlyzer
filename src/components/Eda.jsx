import { useState, useRef, useCallback, useEffect } from "react";
import EdaButton from './UI/button/EdaButton'
import EdaTable from './UI/table/EdaTable';
import ValueCounts from './features/ValueCounts'
import ValueCountsPlot from './features/ValueCountsPlot'
import NumberDescriptionWrapper from './features/NumberDescriptionWrapper'
import NumberCorrelationHeatmap from './features/NumberCorrelation'
import NumberDistribution from './features/NumberDistribution'
import BoxPlot from './features/BoxPlot'
import '../styles/Eda.css'
import trashCan from '../assets/trash-can.svg'


export default function Eda({ data }) {

    const [tableTitle, setTitle] = useState("");
    const [tableDescription, setDescription] = useState("");

    const [loading, setLoading] = useState(null);  // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const [progress, setProgress] = useState(0);  // –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    const [cache, setCache] = useState({});  // –∫–µ—à –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const dataRef = useRef({ columns: [], values: [] });
    const [renderedData, setRenderedData] = useState({ columns: [], values: [] });
    const [customComponent, setCustomComponent] = useState(null);

    const resetEdaState = useCallback(() => {
        setRenderedData({ columns: [], values: [] });
        setCache({});
        setTitle("");
        setDescription("");
        setCustomComponent(null);
    }, []);

    useEffect(() => {
        resetEdaState();
    }, [data, resetEdaState]);


    const handleEdaAction = async (key, computeFn, title, description) => {
        setTitle(title);
        setDescription(description);
        setRenderedData({ columns: [], values: [] }); // –æ—á–∏—â–∞–µ–º UI –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        setLoading(true);
        setCustomComponent(null);

        if (cache[key]) {
            dataRef.current = cache[key];
            setRenderedData(cache[key]);
            setLoading(false);
            return;
        }

        const result = await computeFn();
        setCache(prev => ({ ...prev, [key]: result }));
        dataRef.current = result;
        setRenderedData(result);
        setLoading(false);
    };

    const handleNullClick = () => {
        handleEdaAction('null', () => {
            const nullCounts = data.columns.map(col => data[col].isNa().sum());
            return { columns: data.columns, values: [nullCounts] };
        },
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤", "–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
    };

    const handleUniqueClick = () => {
        handleEdaAction('unique', () => {
            const uniqueCounts = data.columns.map(col => data[col].unique().size);
            return { columns: data.columns, values: [uniqueCounts] };
        },
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", "–†–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π");
    };

    const handleValueCountsClick = () => {
        setProgress(0);
        handleEdaAction('value counts', () => {
            const valueCountsValues = ValueCounts(data.values, data.columns);
            return { columns: data.columns, values: [valueCountsValues] };
        },
            "–ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è");
    };

    const handleValueCountsPlotClick = () => {
        setTitle("–ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π");
        setDescription("–°—Ç–æ–ª–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —á–∞—Å—Ç–æ—Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        setRenderedData({ columns: [], values: [] });
        setLoading(false);
        setCustomComponent(<ValueCountsPlot values={data.values} columns={data.columns} />);
    };

    const handleDescriptionClick = async () => {
        handleEdaAction('describe', async () => {
            const describeDf = await NumberDescriptionWrapper(data.values, data.columns, setProgress);
            return { columns: describeDf.columns, values: describeDf.values };
        },
            "–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —É—á—ë—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)");
    };

    const handleCorrelationClick = () => {
        setTitle("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤");
        setDescription("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏. +1 ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥—Ä—É–≥–∞—è —Ç–∞–∫–∂–µ —Ä–∞—Å—Ç—ë—Ç. -1 ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥—Ä—É–≥–∞—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è. 0 ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.");

        setRenderedData({ columns: [], values: [] });
        setLoading(false);
        setCustomComponent(<NumberCorrelationHeatmap df={data} />);
    };

    const handleNumberDistributionClick = async () => {
        setTitle("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π");
        setDescription("–ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π");

        setRenderedData({ columns: [], values: [] });
        setLoading(false);
        setCustomComponent(<NumberDistribution df={data} />);
    };

    const handleBoxPlotClick = async () => {
        setTitle("BoxPlot");
        setDescription("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏—Ö –∫–≤–∞—Ä—Ç–∏–ª–∏. –ú–µ–¥–∏–∞–Ω–∞ ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —è—â–∏–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–µ–¥–∏–Ω—É –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –Ø—â–∏–∫ ‚Äî –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∏–Ω—Ç–µ—Ä–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR) –º–µ–∂–¥—É Q1 –∏ Q3. –£—Å—ã ‚Äî –ª–∏–Ω–∏–∏, –ø—Ä–æ—Å—Ç–∏—Ä–∞—é—â–∏–µ—Å—è –æ—Ç —è—â–∏–∫–∞ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π (–±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤). –í—ã–±—Ä–æ—Å—ã ‚Äî —Ç–æ—á–∫–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —É—Å–æ–≤, –æ–±—ã—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ 1,5 √ó IQR.");

        setRenderedData({ columns: [], values: [] });
        setLoading(false);
        setCustomComponent(<BoxPlot df={data} />);
    };

    return (
        <div className="eda-wrapper">
            <div className="eda-block">
                <img src={trashCan} className="trash-can" alt="del" onClick={resetEdaState} />
                <ul className="eda-section">
                    <EdaButton onClick={handleNullClick} descr="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π">null</EdaButton>
                    <EdaButton onClick={handleUniqueClick} descr="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π">unique</EdaButton>
                    <div className="eda-button-column-container">
                        <EdaButton onClick={handleValueCountsClick} descr="–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π">value counts</EdaButton>
                        <EdaButton onClick={handleValueCountsPlotClick} descr="–ì—Ä–∞—Ñ–∏–∫–∏ —á–∞—Å—Ç–æ—Ç –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π">üìä</EdaButton>
                    </div>
                </ul>
                <ul className="eda-section">
                    <EdaButton onClick={handleDescriptionClick} descr="–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö">describe</EdaButton>
                    <EdaButton onClick={handleCorrelationClick} descr="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö">correlation</EdaButton>
                    <EdaButton onClick={handleNumberDistributionClick} descr="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö">distribution</EdaButton>
                    <EdaButton onClick={handleBoxPlotClick} descr="–Ø—â–∏–∫ —Å —É—Å–∞–º–∏">boxplot</EdaButton>
                </ul>
            </div>

            {loading && (
                <div className="loader">
                    –ó–∞–≥—Ä—É–∑–∫–∞... {progress}%
                    <progress value={progress} max="100" />
                </div>
            )}

            {(renderedData.values && renderedData.values.length > 0 && !loading || customComponent !== null) && (
                <div className="eda-descr-container">
                    <h1 className="eda-main-text">{tableTitle}</h1>
                    <span className="eda-subtitle-text">{tableDescription}</span>
                </div>
            )}

            {renderedData.values && renderedData.values.length > 0 && !loading && (
                <EdaTable columns={renderedData.columns} values={renderedData.values} />
            )}

            {customComponent !== null && customComponent}
        </div>
    );
}